// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShareMe.DAL.Context;

namespace ShareMe.Migrations
{
    [DbContext(typeof(ShareMeContext))]
    [Migration("20191224110700_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("ShareMe.Models.Entity.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Annotation")
                        .HasColumnType("TEXT");

                    b.Property<int>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Preview")
                        .HasColumnType("BLOB");

                    b.Property<int>("Views")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArticleId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            Annotation = "Article 1 annotation",
                            AuthorId = 1,
                            CategoryId = 1,
                            Content = "Article 1 content",
                            Date = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Views = 0
                        },
                        new
                        {
                            ArticleId = 2,
                            Annotation = "Article 2 annotation",
                            AuthorId = 1,
                            CategoryId = 2,
                            Content = "Article 2 content",
                            Date = new DateTime(2019, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Views = 0
                        },
                        new
                        {
                            ArticleId = 3,
                            Annotation = "Article 3 annotation",
                            AuthorId = 2,
                            CategoryId = 1,
                            Content = "Article 3 content",
                            Date = new DateTime(2019, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Views = 0
                        },
                        new
                        {
                            ArticleId = 4,
                            Annotation = "Article 4 annotation",
                            AuthorId = 2,
                            CategoryId = 3,
                            Content = "Article 4 content",
                            Date = new DateTime(2019, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Views = 0
                        },
                        new
                        {
                            ArticleId = 5,
                            Annotation = "Article 5 annotation",
                            AuthorId = 3,
                            CategoryId = 4,
                            Content = "Article 5 content",
                            Date = new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Views = 0
                        });
                });

            modelBuilder.Entity("ShareMe.Models.Entity.ArticleTag", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TagId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ArticleId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleTag");

                    b.HasData(
                        new
                        {
                            ArticleId = 1,
                            TagId = 1
                        },
                        new
                        {
                            ArticleId = 1,
                            TagId = 2
                        },
                        new
                        {
                            ArticleId = 1,
                            TagId = 3
                        },
                        new
                        {
                            ArticleId = 2,
                            TagId = 1
                        },
                        new
                        {
                            ArticleId = 2,
                            TagId = 2
                        },
                        new
                        {
                            ArticleId = 3,
                            TagId = 1
                        },
                        new
                        {
                            ArticleId = 4,
                            TagId = 2
                        },
                        new
                        {
                            ArticleId = 5,
                            TagId = 3
                        });
                });

            modelBuilder.Entity("ShareMe.Models.Entity.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorId = 1,
                            Name = "Author 1"
                        },
                        new
                        {
                            AuthorId = 2,
                            Name = "Author 2"
                        },
                        new
                        {
                            AuthorId = 3,
                            Name = "Author 3"
                        });
                });

            modelBuilder.Entity("ShareMe.Models.Entity.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Title = "Category 1"
                        },
                        new
                        {
                            CategoryId = 2,
                            Title = "Category 2"
                        },
                        new
                        {
                            CategoryId = 3,
                            Title = "Category 3"
                        },
                        new
                        {
                            CategoryId = 4,
                            Title = "Category 4"
                        });
                });

            modelBuilder.Entity("ShareMe.Models.Entity.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Name = "Tag 1"
                        },
                        new
                        {
                            TagId = 2,
                            Name = "Tag 2"
                        },
                        new
                        {
                            TagId = 3,
                            Name = "Tag 3"
                        });
                });

            modelBuilder.Entity("ShareMe.Models.Entity.Article", b =>
                {
                    b.HasOne("ShareMe.Models.Entity.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShareMe.Models.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShareMe.Models.Entity.ArticleTag", b =>
                {
                    b.HasOne("ShareMe.Models.Entity.Article", "Article")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShareMe.Models.Entity.Tag", "Tag")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
